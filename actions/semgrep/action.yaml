# Semgrep Scanner Action
#
# This composite action executes static analysis security testing using Semgrep,
# providing comprehensive code analysis capabilities.
#
# Key Features:
# - Multi-language support
# - Custom rule sets
# - Incremental scanning
# - SARIF reporting
# - Performance optimization
#
# Process Stages:
# 1. Environment Setup:
#    - Python installation
#    - Semgrep configuration
#    - Rule preparation
#
# 2. Scan Execution:
#    - Target selection
#    - Rule application
#    - Code analysis
#
# 3. Results Processing:
#    - Report generation
#    - Finding analysis
#    - Output formatting
#
# Required Inputs:
# - scan-scope: Files to scan
# - config: Rule configuration
# - severity: Issue threshold
#
# Outputs:
# - scan_result: Scan exit code
# - report_path: Results location
#
# Example Usage:
# steps:
#   - uses: ./actions/semgrep
#     with:
#       scan-scope: "changed"
#       config: "p/owasp-top-ten"
#
# Note: Consider using custom rule sets for project-specific checks

name: "Semgrep SAST Scan"
description: "Runs Semgrep security scanner with configurable options"

inputs:
  scan-scope:
    description: "Scope of files to scan (all/changed)"
    required: false
    default: "changed"
  paths:
    description: "Paths to scan when using all scope"
    required: false
    default: "."
  config:
    description: "Semgrep rules or config to use"
    required: false
    default: "p/default p/cwe-top-25 p/trailofbits p/owasp-top-ten"
  severity:
    description: "Minimum severity level to report (LOW/MEDIUM/HIGH/CRITICAL)"
    required: false
    default: "LOW"
  timeout:
    description: "Maximum time to run semgrep in seconds"
    required: false
    default: "300"
  output-format:
    description: "Format for scan results (text/json/sarif)"
    required: false
    default: "sarif"
  fail-on-findings:
    description: "Whether to fail the action if issues are found"
    required: false
    default: "true"
  semgrep-version:
    description: "Semgrep version"
    required: false
    # renovate: datasource=pypi depName=semgrep
    default: 1.132.0

outputs:
  scan_result:
    description: "Exit code of the Semgrep scan"
    value: ${{ steps.run-semgrep.outputs.exit_code }}
  report_path:
    description: "Path to the generated report file"
    value: ${{ steps.run-semgrep.outputs.report_path }}

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: "3.10"

    - name: Install Semgrep
      shell: bash
      env:
        SEMGREP_VERSION: ${{ inputs.semgrep-version }}
      run: |
        python -m pip install --upgrade pip
        pip install semgrep=="$SEMGREP_VERSION"


    - name: Run Semgrep scan
      id: run-semgrep
      shell: bash
      env:
        SEMGREP_RULES: ${{ inputs.config }}
        INPUTS_SEVERITY: ${{ inputs.severity }}
        INPUTS_TIMEOUT: ${{ inputs.timeout }}
        INPUTS_OUTPUT_FORMAT: ${{ inputs.output-format }}
        INPUTS_FAIL_ON_FINDINGS: ${{ inputs.fail-on-findings }}
      run: |
        set +e
        # Map standard severity levels to Semgrep's levels
        # Semgrep does not support hierarchy, levels must be set explicitly
        case "$INPUTS_SEVERITY" in
          "LOW")
            SEMGREP_SEVERITY="--severity INFO --severity WARNING --severity ERROR"
            ;;
          "MEDIUM")
            SEMGREP_SEVERITY="--severity WARNING --severity ERROR"
            ;;
          "HIGH"|"CRITICAL")
            SEMGREP_SEVERITY="--severity ERROR"
            ;;
          *)
            SEMGREP_SEVERITY="--severity WARNING --severity ERROR"
            ;;
        esac

        echo "Running Semgrep in 'ci' mode which is diff-aware and respects .semgrepignore."

        # Build the output command flags
        OUTPUT_FLAGS=""
        if [[ "$INPUTS_OUTPUT_FORMAT" != "text" ]]; then
          # Handle non-text outputs like 'sarif' or 'json'
          mkdir -p security-results/semgrep
          REPORT_FILE="security-results/semgrep/semgrep-results.$INPUTS_OUTPUT_FORMAT"
          OUTPUT_FLAGS="--${INPUTS_OUTPUT_FORMAT} -o ${REPORT_FILE}"
          echo "report_path=${REPORT_FILE}" >> $GITHUB_OUTPUT
        else
          # Output is "text", so print to console (stdout)
          # 'semgrep ci' does this by default, but --text makes it explicit.
          OUTPUT_FLAGS="--text"
        fi

        # In a PR, it scans changed files. On 'main', it scans all files.
        # It respects .semgrepignore.
        semgrep ci \
          ${SEMGREP_SEVERITY} \
          --error \
          --metrics=off \
          --timeout "$INPUTS_TIMEOUT" \
          ${OUTPUT_FLAGS}

        exit_code="$?"
        echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

        if [[ "$INPUTS_FAIL_ON_FINDINGS" == "true" && -n "$exit_code" && "$exit_code" != "0" ]]; then
          exit $exit_code
        fi

      # Upload results after full scope analysis
    - name: Upload reports
      if: hashFiles('security-results/semgrep/*') != '' # if any report is available
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: semgrep-results
        path: security-results/semgrep
        retention-days: 7
    - name: Upload sarif
      if: hashFiles('security-results/semgrep/semgrep-results.sarif') != '' # if SARIF is available, upload it
      uses: github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3.29.5
      with:
        sarif_file: security-results/semgrep/semgrep-results.sarif
